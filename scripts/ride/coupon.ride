{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

func getItemKey(supplierAddress: String, title: String) = {
    let key = supplierAddress + title;
    key.toBytes().sha256().toBase58String()
}

@Callable(i)
func register(name: String) = {
    let supplierAddress = i.caller.bytes.toBase58String()
    let existingSupplier = match getString(this, "supplier:" + supplierAddress) {
      case a: String => a
      case _ => ""
    }
    if (existingSupplier != "") then throw("Supplier already exists")
    else if (name == "") then throw("Supplier name missing")
    else {
      WriteSet([
        DataEntry("supplier:" + supplierAddress, name)
      ])
    }
}

@Callable(i)
func addItem(title: String, price: Int, data: String) = {
    let supplierAddress = i.caller.bytes.toBase58String()
    let itemKey = getItemKey(supplierAddress, title)
    let supplierName = match getString(this, "supplier:" + supplierAddress) {
      case a: String => a
      case _ => ""
    }
    if (supplierName == "") then throw("Supplier not registered")
    else if (price <= 0) then throw("Price has to be greater than 0")
    else {
      WriteSet([
        DataEntry("item_supplier:" + itemKey, supplierAddress),
        DataEntry("item_price:" + itemKey, price),
        DataEntry("item_data:" + itemKey, data)
      ])
    }
}

@Callable(i)
func purchase(item: String) = {
    let pmt = i.payment.extract()
    if (pmt.assetId.isDefined()) then throw("Can only use Waves")
    else {
        let customerAddress = i.caller.bytes.toBase58String()
        let price = match getInteger(this, "item_price:" + item) {
            case a: Int => a
            case _ => 0
        }
        if (price == 0) then throw("Coupon not found")
        else if (pmt.amount < price) then throw("Payment sent is not enough")
        else if (pmt.amount > price) then throw("Payment sent is too much")
        else {
            WriteSet([
                DataEntry("status:purchase_item_" + item + "_customer_" + customerAddress, "confirmed"),
                DataEntry("price:purchase_item_" + item + "_customer_" + customerAddress, price)
            ])
        }
    }
}

@Verifier(tx)
func verify() = sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
